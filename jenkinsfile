pipeline {
    agent any
    environment {
        DOCKER_USERNAME = credentials('docker-credentials') 
        DOCKER_PASSWORD = credentials('docker-credentials')
    }
    stages {
        stage('Checkout Code') {
            steps {
                // Pull the latest code from the Git repository
                checkout scm
            }
        }
        stage('Run Backend and Frontend Tests') {
            steps {
                bat 'echo Starting npm install...'
                bat 'npm install'
                bat 'echo npm install completed.'

                bat 'echo Running backend tests...'
                bat 'npm run backend-test'
                bat 'echo Backend tests completed.'

                bat 'echo Running frontend instrumentation...'
                bat 'npm run frontend-instrument'
                bat 'echo Frontend instrumentation completed.'

                bat 'echo Running frontend tests...'
                bat 'npm run frontend-test'
                bat 'echo Frontend tests completed.'
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    bat '''
                    docker login -u %DOCKER_USERNAME% -p %DOCKER_PASSWORD%
                    docker-compose build
                    docker-compose push
                    '''
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                bat 'echo Logging into Azure...'
                bat 'az login --service-principal -u "e1634f3c-9468-4ee9-bff6-ae3030253069" -p "3u18Q~TX3Dyj47ABH4xuv5y_XLbJSzlZZiuwvadD" --tenant "25a99bf0-8e72-472a-ae50-adfbdf0df6f1"'
                bat 'echo Azure login completed.'

                bat 'echo Checking if AKS cluster exists...'
                bat 'az aks show --resource-group rmsResourceGroup --name rmsAKSCluster -o json >nul 2>nul || az aks create --resource-group rmsResourceGroup --name rmsAKSCluster --node-count 1 --generate-ssh-keys 2>&1'
                bat 'echo AKS cluster verification and creation completed.'

                bat 'echo Retrieving AKS cluster credentials...'
                bat 'az aks get-credentials --resource-group "rmsResourceGroup" --name "rmsAKSCluster" --overwrite-existing --subscription "29e98716-8861-41d1-bdc2-b670c7d43dac"'
                bat 'echo AKS credentials retrieval completed.'

                bat 'echo Applying Kubernetes deployment configuration...'
                bat 'kubectl apply -f rms-deployment.yaml'
                bat 'echo Kubernetes deployment configuration applied.'

                bat 'echo Applying Kubernetes service configuration...'
                bat 'kubectl apply -f rms-service.yaml'
                bat 'echo Kubernetes service configuration applied.'

                bat 'echo Fetching rollout history...'
                bat 'kubectl rollout history deployment/rms-deployment'
                bat 'echo Rollout history fetched.'

                bat 'echo Retrieving pod information...'
                bat 'kubectl get pods'
                bat 'echo Pod information retrieved.'

                bat 'echo Retrieving service information...'
                bat 'kubectl get services'
                bat 'echo Service information retrieved.'
            }
        }
    }
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for errors.'
        }
    }
}
