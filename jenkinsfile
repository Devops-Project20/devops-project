pipeline {
    agent any
    environment {
        DOCKER_USERNAME = credentials('docker-credentials') 
        DOCKER_PASSWORD = credentials('docker-credentials')
    }
    stages {
        stage('Checkout Code') {
            steps {
                // Pull the latest code from the Git repository
                checkout scm
            }
        }
        stage('Run Backend and Frontend Tests') {
            steps {
                bat '''
                npm install
                npm run backend-test
                npm run frontend-instrument
                npm run frontend-test
                '''
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    bat '''
                    docker login -u %DOCKER_USERNAME% -p %DOCKER_PASSWORD%
                    docker-compose build
                    docker-compose push
                    '''
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                // Apply Kubernetes configuration using rms-deployment.yaml and rms-service.yaml
                bat '''
                az login --service-principal -u "e1634f3c-9468-4ee9-bff6-ae3030253069" -p "3u18Q~TX3Dyj47ABH4xuv5y_XLbJSzlZZiuwvadD" --tenant "25a99bf0-8e72-472a-ae50-adfbdf0df6f1"
                az aks show --resource-group rmsResourceGroup --name rmsAKSCluster -o json >nul 2>nul || az aks create --resource-group rmsResourceGroup --name rmsAKSCluster --node-count 1 --generate-ssh-keys 2>&1
                az aks get-credentials --resource-group "rmsResourceGroup" --name "rmsAKSCluster" --overwrite-existing --subscription "29e98716-8861-41d1-bdc2-b670c7d43dac"
                kubectl apply -f rms-deployment.yaml
                kubectl apply -f rms-service.yaml
                kubectl rollout history deployment/rms-deployment
                kubectl get pods
                kubectl get services
                '''
            }
        }
    }
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for errors.'
        }
    }
}
